import java.util.ArrayList;
import java.util.Scanner;
public class SSSPList {
    static final int INF=9999;
    static int minDistance(int[] dist,boolean[] visited,int n){
        int min=INF,minIndex=-1;
        for(int v=0;v<n;v++){
            if(!visited[v] && dist[v]<=min){
                min=dist[v];
                minIndex=v;
            }
        }return minIndex;
    }
    static void ss(ArrayList<ArrayList<int[]>>adjList,int v,int n){//
        int[] dist=new int[n];
        boolean[] visited=new boolean[n];
        for(int i=0;i<n;i++){
            dist[i]=INF;
            visited[i]=false;
        }
        dist[v]=0;
        for(int count=0;count<n-1;count++){
            int u=minDistance(dist, visited, n);
            visited[u]=true;
            for(int[] neighbour:adjList.get(u)){//
                int w=neighbour[0];
                int weight=neighbour[1];
                if(!visited[w] && dist[u]!=INF && dist[u]+weight<dist[w]){
                    dist[w]=dist[u]+weight;
                }
            }
        }
        System.out.println("Vertex\t Distance from source " + v);
        for(int i=0;i<n;i++){
            System.out.println(i + "\t" + (dist[i]==INF?"INF":dist[i]));
        }
 
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of vertices: ");
        int n=sc.nextInt();
        ArrayList<ArrayList<int[]>>adjList=new ArrayList<>();//
        for(int i=0;i<n;i++){
            adjList.add(new ArrayList<int[]>());//
           
        } 
            for(int i=0;i<n;i++){
                System.out.println("Enter the edges for vertex: " + i + "(format: neighbour vertex weight)");
                System.out.println("Enter -1 to stop adding edges for this vertex: ");
                while (true) {
                    int neighbour=sc.nextInt();
                    if(neighbour==-1) break;
                    int weight=sc.nextInt();
                    adjList.get(i).add(new int[]
                    {neighbour,weight});
                }
            }
        
        System.out.println("Enter source vertex: ");
        int v=sc.nextInt();
        ss(adjList,v,n);
    }
}

import java.util.*;

public class BFT {
    private int vertices;
    private int[][] adjMatrix;
    
    BFT(int vertices) {
        this.vertices = vertices;
        adjMatrix = new int[vertices][vertices];
        for (int i = 0; i < vertices; i++) {
            for (int j = 0; j < vertices; j++) {
                adjMatrix[i][j] = 0;
            }
        }
    }
    
    public void addEdgeMatrix(int src, int des) {
        adjMatrix[src][des] = 1;
        adjMatrix[des][src] = 1;
    }
    
    public List<Integer> bftMatrix(int startVertex) {
        boolean[] visited = new boolean[vertices];
        List<Integer> result = new ArrayList<>();
        Queue<Integer> queue = new LinkedList<>();
        
        visited[startVertex] = true;
        queue.add(startVertex);
        
        while (!queue.isEmpty()) {
            int vertex = queue.poll();
            result.add(vertex);
        
            for (int i = 0; i < vertices; i++) {
                if (adjMatrix[vertex][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    queue.add(i);
                }
            }
        }
        return result;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int vertices = sc.nextInt();
        BFT graph = new BFT(vertices);
        System.out.print("Enter the number of edges: ");
        int edges = sc.nextInt();
        
        System.out.println("Enter the edges (format: vertex1 vertex2):");
        for (int i = 0; i < edges; i++) {
            int v1 = sc.nextInt();
            int v2 = sc.nextInt();
            if (v1 >= vertices || v2 >= vertices || v1 < 0 || v2 < 0) {
                System.out.println("Invalid vertex! Vertices should be between 0 and " + (vertices - 1));
                i--; // Retry this edge
                continue;
            }
            graph.addEdgeMatrix(v1, v2);
        }
        System.out.print("Enter the starting vertex for BFT: ");
        int startVertex = sc.nextInt();
        if (startVertex >= vertices || startVertex < 0) {
            System.out.println("Invalid starting vertex! It should be between 0 and " + (vertices - 1));
        } else {
            List<Integer> traversal = graph.bftMatrix(startVertex);
            System.out.print("BFT starting from vertex " + startVertex + ": ");
            for (int vertex : traversal) {
                System.out.print(vertex + " ");
            }
            System.out.println();
        }
        
        sc.close();
    }
}

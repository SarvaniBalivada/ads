import java.util.*;

class BiconnectedComponentsList {
    private int V; // Number of vertices
    private List<List<Integer>> adj; // Adjacency list
    private int time; // Discovery time
    private int[] disc; // Discovery times
    private int[] low; // Lowest reachable vertex
    private int[] parent; // Parent in DFS tree
    private Stack<int[]> stack; // Stack to store edges

    public BiconnectedComponentsList(int v) {
        V = v;
        adj = new ArrayList<>();
        for (int i = 0; i < v; i++) {
            adj.add(new ArrayList<>());
        }
        disc = new int[v];
        low = new int[v];
        parent = new int[v];
        stack = new Stack<>();
        time = 0;
        Arrays.fill(parent, -1);
    }

    // Add edge to the graph
    public void addEdge(int u, int v) {
        adj.get(u).add(v);
        adj.get(v).add(u); // Undirected graph
    }

    // DFS to find biconnected components
    private void BCCUtil(int u) {
        disc[u] = low[u] = ++time;

        for (int v : adj.get(u)) {
            if (disc[v] == 0) { // v is not visited
                stack.push(new int[]{u, v});
                parent[v] = u;
                BCCUtil(v);

                low[u] = Math.min(low[u], low[v]);

                // Check if u is an articulation point
                if (low[v] >= disc[u]) {
                    // Print biconnected component
                    System.out.print("Biconnected Component: ");
                    while (!stack.isEmpty()) {
                        int[] edge = stack.pop();
                        System.out.print("(" + edge[0] + "," + edge[1] + ") ");
                        if (edge[0] == u && edge[1] == v) break;
                    }
                    System.out.println();
                }
            } else if (v != parent[u] && disc[v] < disc[u]) {
                stack.push(new int[]{u, v});
                low[u] = Math.min(low[u], disc[v]);
            }
        }
    }

    // Find all biconnected components
    public void findBCC() {
        Arrays.fill(disc, 0); // Mark all vertices as not visited
        for (int i = 0; i < V; i++) {
            if (disc[i] == 0) {
                BCCUtil(i);
                // Print remaining edges in stack as a component
                if (!stack.isEmpty()) {
                    System.out.print("Biconnected Component: ");
                    while (!stack.isEmpty()) {
                        int[] edge = stack.pop();
                        System.out.print("(" + edge[0] + "," + edge[1] + ") ");
                    }
                    System.out.println();
                }
            }
        }
    }

    public static void main(String[] args) {
        BiconnectedComponentsList g = new BiconnectedComponentsList(5);
        g.addEdge(0, 1);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(1, 3);
        g.addEdge(3, 4);
        g.addEdge(4, 1);
        System.out.println("Biconnected Components in the graph:");
        g.findBCC();
    }
}

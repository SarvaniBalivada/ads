import java.util.Scanner;
public class MinHeap {
    private int[] heap; // taking variables
    private int capacity;
    private int size;


    //Constructoor

    public MinHeap(int capacity){
        this.capacity=capacity;
        size=0;
        this.heap=new int[capacity];
 
    }

    //parent ,leftChild,rightChild

    private int parent(int i){return (i-1)/2;}
    private int leftChild(int i){return (2*i+1);}
    private int rightChild(int i){return (2*i+2);}

    //swap
    public void swap(int i,int j){
        int temp=heap[i];
        heap[i]=heap[j];
        heap[j]=temp;
    }

    //insert

    public void insert(int value){
        if(size==capacity){
            System.out.println("Heap is full");//check heap is full or not if size==capacity full
            return;
        }
        
            heap[size]=value;
            int current=size;
            size++;

            while(current>0 && heap[parent(current)]>heap[current]){
                swap(parent(current),current);
                current=parent(current);
            }
    }

    public void delete(int value){
        if(size==0){
            System.out.println("Heap is empty ");
            return;
        }
        int index = -1;
        for(int i = 0; i < size; i++) {
            if(heap[i] == value) {
                index = i;
                break;
            }
        }
        if(index == -1) {
            System.out.println("Value not found");
            return;
        }
        heap[index]=heap[size-1];
        size--;
        minHeapify(index);
    }
    private void minHeapify(int i){
        int smallest=i;
        int left=leftChild(i);
        int right=rightChild(i);

        if(left<size && heap[left]<heap[smallest]){
            smallest=left;
        }
        if(right<size && heap[right]<heap[smallest]){
            smallest=right;
        }
        if(smallest!=i){
            swap(smallest,i);
            minHeapify(smallest);
        }

    }

    public void display(){
        if(size==0){
            System.out.println("Nothing to display");
            return;
        }
        System.out.println("Min Heap: ");
        for(int i=0;i<size;i++){
            System.out.println(heap[i]+ " ");
        }System.out.println();
    }


    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);

        System.out.println("Enter capacity: ");
        int initialCapacity=sc.nextInt();
        MinHeap minheap=new MinHeap(initialCapacity);


        System.out.print("Enter number of elements to insert: ");
        int numOfele=sc.nextInt();

        if (numOfele > initialCapacity) {
            System.out.println("Number of elements cannot exceed capacity");
            return;
        }
        System.out.print("Enter " + numOfele +  " elements");
        for(int i=0;i<numOfele;i++){
            int value=sc.nextInt();
            minheap.insert(value);
        } 
        System.out.print("Initial Heap: ");
        minheap.display();

        
        
            while(true){
                System.out.println("Enter a value to delete(or -1 to exit): ");
                int value=sc.nextInt();
                if(value==-1){
                    break;
                }
                minheap.delete(value);
                System.out.println("After deletion:");
                minheap.display();
              
            }
            System.out.print("Final Heap: ");
            minheap.display();
    }
}

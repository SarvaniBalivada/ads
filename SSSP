import java.util.Scanner;
public class SSSP {
    static final int INF=9999;
    static int minDistance(int[] dist,boolean[] visited,int n){
        int min=INF,minIndex=-1;
        for(int v=0;v<n;v++){
            if(!visited[v] && dist[v]<=min){
                min=dist[v];
                minIndex=v;
            }
        }return minIndex;
    }
    static void ss(int[][] cost,int v,int n){
        int[] dist=new int[n];
        boolean[] visited=new boolean[n];
        for(int i=0;i<n;i++){
            dist[i]=INF;//initializing
            visited[i]=false;
        }
        dist[v]=0;
        for(int count=0;count<n-1;count++){
            int u=minDistance(dist, visited, n);//finding ss
            visited[u]=true;
            for(int w=0;w<n;w++){
                if(!visited[w] && dist[u]!=INF && cost[u][w]!=INF && dist[u]+cost[u][w]<dist[w]){
                    dist[w]=dist[u]+cost[u][w];
                }
            }
        }
        System.out.println("Vertex\t Distance from source " + v);
        for(int i=0;i<n;i++){
            System.out.println(i + "\t" + (dist[i]==INF?"INF":dist[i]));
        }
 
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter number of vertices: ");
        int n=sc.nextInt();
        int[][] cost=new int[n][n];
        System.out.println("Enter the cost adjacency matrix(use 9999 to INF): ");
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                cost[i][j]=sc.nextInt();
            }
        }
        System.out.println("Enter source vertex: ");
        int v=sc.nextInt();
        ss(cost,v,n);
    }
}

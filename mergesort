import java.util.Scanner;

public class MergeSort {

    public static void mergeSort(int[] arr,int low, int high){
        if(low<high){
            int mid=low+(high-low)/2;
            mergeSort(arr, low, mid);
            mergeSort(arr, mid+1, high);
            merge(arr,low,mid,high);
        }
    }
    public static void merge(int[] a,int low,int mid,int high){
        int b[]=new int[high-low+1];
        int i=low,j=mid+1,k=0;
        while(i<=mid && j<=high){
            if(a[i]<=a[j]){
                b[k++]=a[i++];
            }
            else{
                b[k++]=a[j++];
            }
            while(i<=mid){
                b[k++]=a[i++];
            }
            while(j<=high){
                b[k++]=a[j++];
            }
            for(k=0;k<b.length;k++){
                a[low+k]=b[k];
            }
        }
    }



    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        System.out.print("Enter size of array: ");
        int n=sc.nextInt();
        int[] arr=new int[n];
        System.out.println("Enter elements of the array: ");
        for(int i=0;i<n;i++){
            arr[i]=sc.nextInt();
        }
        System.out.println("Original array: ");
        for(int num:arr){
            System.out.print(num+ " ");
        }
        long startTime=System.nanoTime();
        mergeSort(arr,0,n-1);
        long endTime=System.nanoTime();
        for(int num:arr){
            System.out.print(num+ " ");
        }
        long executionTime=endTime-startTime;
        System.out.println("\n Exection Time in nanoseconds: "+ executionTime);
    }
}
